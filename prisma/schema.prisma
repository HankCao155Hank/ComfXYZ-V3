// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth 相关
  accounts Account[]
  sessions Session[]
  
  // 关联的工作流
  workflows Workflow[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  // ComfyUI工作流配置
  curlRequest String // 原始curl请求
  workflowId  String // 从curl中解析出的workflow_id
  nodeData    String // 从curl中解析出的节点数据JSON字符串
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联用户
  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 关联的生成任务
  generations Generation[]
}

model Generation {
  id         String   @id @default(cuid())
  workflowId String?
  workflow   Workflow? @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  status     String   // pending, running, completed, failed
  blobUrl    String?  // Vercel Blob URL
  errorMsg   String?
  startedAt  DateTime @default(now())
  completedAt DateTime?
  
  // 生成参数（可能与工作流不同，用于记录实际使用的参数）
  actualPrompt      String?
  actualNegativePrompt String?
  actualWidth       Int?
  actualHeight      Int?
  actualSteps       Int?
  actualCfg         Float?
  actualSeed        BigInt?
}
